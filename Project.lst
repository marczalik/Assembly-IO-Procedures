Microsoft (R) Macro Assembler Version 14.29.30139.0	    03/29/22 11:25:11
<Low-level I/O Procedures with String Primitives and Macros   Page 1 - 1


				TITLE Low-level I/O Procedures with String Primitives and Macros     (Proj6_zalikm.asm)

				; Author: Marc Zalik
				; Last Modified: 2022-03-11
				; OSU email address: zalikm@oregonstate.edu
				; Course number/section:   CS271 Section 400
				; Project Number: Project 6                Due Date: 2022-03-14
				; Description: This file contains contains the procedure main, along with subprocedures introduction,
				;       ReadVal, WriteVal, and farewell, and macros mGetString and mDisplayString. Together, these
				;       procedures and macros fill an array with user input signed integer values which are captured
				;       as strings before converting to numeric values. The array is then printed out as a list of
				;       values after converting back to strings, along with the sum and average of the input values.
				;       Array size is defined by constants for easy updating, and procedures and macros use the stack 
				;       and save/restore registers for proper modularization. Displays error messages for invalid inputs.

				INCLUDE Irvine32.inc
			      C ; Include file for Irvine32.lib             (Irvine32.inc)
			      C 
			      C ;OPTION CASEMAP:NONE		; optional: make identifiers case-sensitive
			      C 
			      C INCLUDE SmallWin.inc		; MS-Windows prototypes, structures, and constants
			      C .NOLIST
			      C .LIST
			      C 
			      C INCLUDE VirtualKeys.inc
			      C ; VirtualKeys.inc
			      C .NOLIST
			      C .LIST
			      C 
			      C 
			      C .NOLIST
			      C .LIST
			      C 

				;----------------------------------------------------------------------------------------------------
				; Name: mGetString
				; 
				; Prompts a user to input some string, stores the string in the buffer, and returns the number of
				;       bytes read.
				; 
				; Preconditions: String, buffer, and bytesRead variables must be passed by reference. maxLength must 
				;       be passed by value. 
				; 
				; Postconditions: All used registers saved and restored. Prompt displayed to the screen. 
				; 
				; Receives: 
				;       string = Reference to prompt string
				;       buffer = Address of output buffer
				;       maxLength = Value of max length of input string
				;       bytesRead = Reference to DWORD that stores the number of bytes read
				; 
				; Returns: 
				;       buffer = Output buffer updated with string read by ReadString
				;       bytesRead = Value at reference to DWORD that stores the number of bytes read updated with 
				;           number of bytes read
				; 
				;----------------------------------------------------------------------------------------------------
				mGetString MACRO string:REQ, buffer:REQ, maxLength:REQ, bytesRead:REQ
				    ; Save registers
				    PUSH    EAX
				    PUSH    ECX
				    PUSH    EDX
				    PUSH    EDI

				;----------------------------------------------------------------
				; Print prompt to console, capture input string, store it in the
				; buffer, and store number of bytes read.
				;----------------------------------------------------------------
				    MOV     EDX, string                     ; Prompt
				    CALL    WriteString
				    MOV     EDX, buffer                     ; Address of buffer
				    MOV     ECX, maxLength
				    CALL    ReadString
				    MOV     EDI, bytesRead
				    MOV     [EDI], EAX                      ; Store number of bytes read

				    ; Restore registers
				    POP     EDI
				    POP     EDX
				    POP     ECX
				    POP     EAX

				ENDM


				;----------------------------------------------------------------------------------------------------
				; Name: mDisplayString
				; 
				; Given a reference to a null-terminated string, prints the string to the console.
				; 
				; Preconditions: String must be passed by reference.
				; 
				; Postconditions: All used registers saved and restored.
				; 
				; Receives: 
				;       string = Reference to string
				; 
				; Returns: None.
				; 
				;----------------------------------------------------------------------------------------------------
				mDisplayString MACRO string:REQ
				    ; Save register
				    PUSH    EDX

				    ; Print string to console
				    MOV     EDX, string                     ; String
				    CALL    WriteString

				    ; Restore register
				    POP     EDX

				ENDM


 = 00000064			BUFFER_SIZE = 100
 = 0000000A			ARRAY_SIZE = 10


 00000000			.data

 00000000 50 52 4F 47 52	greeting            BYTE        "PROGRAMMING ASSIGNMENT 6: Designing low-level I/O procedures",13,10,"Written by Marc Zalik",13,10,13,10,0
	   41 4D 4D 49 4E
	   47 20 41 53 53
	   49 47 4E 4D 45
	   4E 54 20 36 3A
	   20 44 65 73 69
	   67 6E 69 6E 67
	   20 6C 6F 77 2D
	   6C 65 76 65 6C
	   20 49 2F 4F 20
	   70 72 6F 63 65
	   64 75 72 65 73
	   0D 0A 57 72 69
	   74 74 65 6E 20
	   62 79 20 4D 61
	   72 63 20 5A 61
	   6C 69 6B 0D 0A
	   0D 0A 00
 00000058 0D 0A 54 68 61	goodbye             BYTE        13,10,"Thanks for playing!",0
	   6E 6B 73 20 66
	   6F 72 20 70 6C
	   61 79 69 6E 67
	   21 00
 0000006E 50 6C 65 61 73	prompt              BYTE        "Please enter a signed number: ",0
	   65 20 65 6E 74
	   65 72 20 61 20
	   73 69 67 6E 65
	   64 20 6E 75 6D
	   62 65 72 3A 20
	   00
 0000008D  00000064 [		inputBuffer         BYTE        BUFFER_SIZE DUP(0)
	    00
	   ]
 000000F1  00000064 [		outputBuffer        BYTE        BUFFER_SIZE DUP(0)
	    00
	   ]
 00000155  0000000A [		numArray            SDWORD      ARRAY_SIZE DUP(?)
	    00000000
	   ]
 0000017D 00000000		numVal              SDWORD      0
 00000181 00			validFlag           BYTE        0
 00000182 00000000		sum                 SDWORD      0
 00000186 00000000		average             SDWORD      0
 0000018A 00000001		count               DWORD       1
 0000018E 00000000		bytesRead           DWORD       0
 00000192 45 52 52 4F 52	errorMsg            BYTE        "ERROR: You did not enter a valid signed number, or your number was too large.",13,10,0
	   3A 20 59 6F 75
	   20 64 69 64 20
	   6E 6F 74 20 65
	   6E 74 65 72 20
	   61 20 76 61 6C
	   69 64 20 73 69
	   67 6E 65 64 20
	   6E 75 6D 62 65
	   72 2C 20 6F 72
	   20 79 6F 75 72
	   20 6E 75 6D 62
	   65 72 20 77 61
	   73 20 74 6F 6F
	   20 6C 61 72 67
	   65 2E 0D 0A 00
 000001E2 0D 0A 59 6F 75	outputMsg           BYTE        13,10,"You entered the following numbers:",13,10,0
	   20 65 6E 74 65
	   72 65 64 20 74
	   68 65 20 66 6F
	   6C 6C 6F 77 69
	   6E 67 20 6E 75
	   6D 62 65 72 73
	   3A 0D 0A 00
 00000209 54 68 65 20 73	sumMsg              BYTE        "The sum of these numbers is: ",0
	   75 6D 20 6F 66
	   20 74 68 65 73
	   65 20 6E 75 6D
	   62 65 72 73 20
	   69 73 3A 20 00
 00000227 59 6F 75 72 20	subtotalMsg         BYTE        "Your subtotal so far is: ",0
	   73 75 62 74 6F
	   74 61 6C 20 73
	   6F 20 66 61 72
	   20 69 73 3A 20
	   00
 00000241 54 68 65 20 74	avgMsg              BYTE        "The truncated average is: ",0
	   72 75 6E 63 61
	   74 65 64 20 61
	   76 65 72 61 67
	   65 20 69 73 3A
	   20 00
 0000025C 2C 20 00		comma               BYTE        ', ',0
 0000025F 2E 20 00		period              BYTE        '. ',0
 00000262 5B 20 00		leftBracket         BYTE        '[ ',0
 00000265 20 5D 0D 0A 00	rightBracket        BYTE        ' ]',13,10,0
 0000026A 2A 2A 45 43 31	extraCredit_1       BYTE        "**EC1: Number input lines and display a running subtotal using WriteVal.",13,10,13,10,0
	   3A 20 4E 75 6D
	   62 65 72 20 69
	   6E 70 75 74 20
	   6C 69 6E 65 73
	   20 61 6E 64 20
	   64 69 73 70 6C
	   61 79 20 61 20
	   72 75 6E 6E 69
	   6E 67 20 73 75
	   62 74 6F 74 61
	   6C 20 75 73 69
	   6E 67 20 57 72
	   69 74 65 56 61
	   6C 2E 0D 0A 0D
	   0A 00


 00000000			.code
				;----------------------------------------------------------------------------------------------------
				; Name: main
				; 
				; Prompts user to input ARRAY_SIZE number of signed integers (default 10), which are captured as
				; strings, converted to numeric values, and stored in an array. A running count and subtotal are printed
				; for each valid input, and once the array is filled displays a list of the user inputs as strings along
				; with total sum and average values of the inputs (also displayed as strings). Validates user input
				; against constraints for the data type (SDWORD) and prints error messages if invalid input provided.
				; 
				; Preconditions: Global constants ARRAY_SIZE and BUFFER_SIZE must be defined. Macros mGetString and 
				;       mDisplayString must be defined.
				; 
				; Postconditions: Changes registers EAX, EBX, ECX, EDX, ESI, and EDI. 
				; 
				; Receives:
				;       greeting = global variable string with name of program and author
				;       goodbye = global variable string with farewell message
				;       prompt = global variable string with prompt for user input
				;       inputBuffer = global variable of the buffer array used for string input and integer to string conversions
				;       outputBuffer = global variable of the buffer array used for integer to string conversions
				;       numArray = global variable array for storing numeric values of integers provided
				;       numVal = global variable SDWORD for numeric value of most recent integer input
				;       validFlag = global variable BYTE flagging whether most recent user input is a valid signed integer
				;       sum = global variable SDWORD for storing running sum of user integers
				;       average = global variable SDWORD for storing average of all valid user integers
				;       count = global variable DWORD for storing count of valid inputs provided for numbering lines
				;       bytesRead = global variable DWORD for number of bytes read (string length) of valid user input
				;       errorMsg = global variable string with error message for invalid input
				;       outputMsg = global variable string for beginning of list of user inputs
				;       sumMsg = global variable string with sum of user inputs
				;       subtotalMsg = global variable string for running subtotal of user inputs
				;       avgMsg = global variable string for average of user inputs
				;       comma = global variable string with comma character for separating list of user inputs
				;       period = global variable string with period character for delimiting the line number
				;       leftBracket = global variable string with left bracket character for starting the list of user inputs
				;       rightBracket = global variable string with right bracket character for ending the list of user inputs
				;       extraCredit_1 = global variable string noting which extra credit was worked on
				; 
				; Returns: None.
				; 
				;----------------------------------------------------------------------------------------------------
 00000000			main PROC

 00000000  68 00000000 R	    PUSH    OFFSET  greeting
 00000005  68 0000026A R	    PUSH    OFFSET  extraCredit_1
 0000000A  E8 0000015D		    CALL    introduction

 0000000F  B9 0000000A		    MOV     ECX, ARRAY_SIZE
 00000014  BF 00000155 R	    MOV     EDI, OFFSET numArray

 00000019			_InLoop:
				;----------------------------------------------------------------
				; Prints the line number (count of valid inputs) and a prompt for
				; the next integer, converts the string input to a numeric value,
				; stores the value in an array, and accumulates and prints the 
				; running sum.
				;----------------------------------------------------------------
				    ; Display Count
 00000019  FF 35 0000018A R	    PUSH    count
 0000001F  68 0000008D R	    PUSH    OFFSET  inputBuffer
 00000024  68 000000F1 R	    PUSH    OFFSET  outputBuffer
 00000029  E8 00000241		    CALL    WriteVal
 0000002E  BA 0000025F R	    MOV     EDX, OFFSET period
 00000033  E8 00000000 E	    CALL    WriteString

				    ; Read input
 00000038  68 0000018E R	    PUSH    OFFSET  bytesRead
 0000003D  68 00000181 R	    PUSH    OFFSET  validFlag
 00000042  68 0000017D R	    PUSH    OFFSET  numVal
 00000047  68 0000006E R	    PUSH    OFFSET  prompt
 0000004C  68 0000008D R	    PUSH    OFFSET  inputBuffer
 00000051  68 00000192 R	    PUSH    OFFSET  errorMsg
 00000056  E8 0000012A		    CALL    ReadVal

				    ; Check if valid input
 0000005B  80 3D 00000181 R	    CMP     validFlag, 0
	   00
 00000062  74 B5		    JE      _InLoop                         ; Repeat until valid input detected

				    ; Accumulate sum and store to array
 00000064  A1 0000017D R	    MOV     EAX, numVal
 00000069  01 05 00000182 R	    ADD     sum, EAX
 0000006F  89 07		    MOV     [EDI], EAX                      ; Register Indirect for accessing array elements
 00000071  83 C7 04		    ADD     EDI, TYPE numArray
 00000074  FF 05 0000018A R	    INC     count

				    ; Print subtotal
 0000007A  BA 00000227 R	    MOV     EDX, OFFSET subtotalMsg
 0000007F  E8 00000000 E	    CALL    WriteString
 00000084  FF 35 00000182 R	    PUSH    sum
 0000008A  68 0000008D R	    PUSH    OFFSET  inputBuffer
 0000008F  68 000000F1 R	    PUSH    OFFSET  outputBuffer
 00000094  E8 000001D6		    CALL    WriteVal
 00000099  E8 00000000 E	    CALL    CrLf
 0000009E  E8 00000000 E	    CALL    CrLf
				    
 000000A3  49			    DEC     ECX
 000000A4  83 F9 00		    CMP     ECX, 0
 000000A7  0F 87 FFFFFF6C	    JA      _InLoop                         ; Too far for LOOP instruction

 000000AD			_Average:
				;----------------------------------------------------------------
				; Prints the ending message, prepares for the output loop to
				; print off values as strings, and calculates the average value.
				;----------------------------------------------------------------
 000000AD  BA 000001E2 R	    MOV     EDX, OFFSET outputMsg
 000000B2  E8 00000000 E	    CALL    WriteString
 000000B7  BA 00000262 R	    MOV     EDX, OFFSET leftBracket
 000000BC  E8 00000000 E	    CALL    WriteString

				    ; Calculate Average
 000000C1  A1 00000182 R	    MOV     EAX, sum
 000000C6  99			    CDQ
 000000C7  BB 0000000A		    MOV     EBX, ARRAY_SIZE
 000000CC  F7 FB		    IDIV    EBX                             ; Average = sum / number of elements in array
 000000CE  A3 00000186 R	    MOV     average, EAX

				    ; Prepare for outloop
 000000D3  B9 0000000A		    MOV     ECX, ARRAY_SIZE
 000000D8  BE 00000155 R	    MOV     ESI, OFFSET numArray

 000000DD			_OutLoop:
				;----------------------------------------------------------------
				; Prints off the valid inputs as stored in the integer array as
				; strings using WriteVal.
				;----------------------------------------------------------------
 000000DD  FF 36		    PUSH    [ESI]                           ; Register Indirect for accessing array elements
 000000DF  68 0000008D R	    PUSH    OFFSET  inputBuffer
 000000E4  68 000000F1 R	    PUSH    OFFSET  outputBuffer
 000000E9  E8 00000181		    CALL    WriteVal
 000000EE  83 F9 01		    CMP     ECX, 1
 000000F1  75 0C		    JNE     _MiddleOfArray
 000000F3  BA 00000265 R	    MOV     EDX, OFFSET rightBracket
 000000F8  E8 00000000 E	    CALL    WriteString
 000000FD  EB 0D		    JMP     _EndOutLoop

 000000FF			_MiddleOfArray:
				    ; Print commas separating values in the array
 000000FF  BA 0000025C R	    MOV     EDX, OFFSET comma
 00000104  E8 00000000 E	    CALL    WriteString
 00000109  83 C6 04		    ADD     ESI, TYPE numArray

 0000010C			_EndOutLoop:
				;----------------------------------------------------------------
				; Prints the end of the array, including the final sum and 
				; average values.
				;----------------------------------------------------------------
 0000010C  E2 CF		    LOOP    _OutLoop

				    ; Print sum and average
 0000010E  BA 00000209 R	    MOV     EDX, OFFSET sumMsg
 00000113  E8 00000000 E	    CALL    WriteString
 00000118  FF 35 00000182 R	    PUSH    sum
 0000011E  68 0000008D R	    PUSH    OFFSET  inputBuffer
 00000123  68 000000F1 R	    PUSH    OFFSET  outputBuffer
 00000128  E8 00000142		    CALL    WriteVal                        ; WriteVal to print sum
 0000012D  E8 00000000 E	    CALL    CrLf
 00000132  BA 00000241 R	    MOV     EDX, OFFSET avgMsg
 00000137  E8 00000000 E	    CALL    WriteString
 0000013C  FF 35 00000186 R	    PUSH    average
 00000142  68 0000008D R	    PUSH    OFFSET  inputBuffer
 00000147  68 000000F1 R	    PUSH    OFFSET  outputBuffer
 0000014C  E8 0000011E		    CALL    WriteVal                        ; WriteVal to print average
 00000151  E8 00000000 E	    CALL    CrLf
 00000156  E8 00000000 E	    CALL    CrLf

 0000015B  68 00000058 R	    PUSH    OFFSET  goodbye
 00000160  E8 000001A2		    CALL    farewell

					Invoke ExitProcess,0	; exit to operating system
 00000165  6A 00	   *	    push   +000000000h
 00000167  E8 00000000 E   *	    call   ExitProcess
 0000016C			main ENDP


				;----------------------------------------------------------------------------------------------------
				; Name: introduction
				; 
				; Prints an introduction with the name of the program and author, a description of the program, and a 
				; note indicating which extra credit was worked on.
				; 
				; Preconditions: None.
				; 
				; Postconditions: All used registers saved and restored. Displays message to the console.
				; 
				; Receives: 
				;       [EBP+16] = Reference to introduction string
				;       [EBP+12] = Reference to EC1 message
				; 
				; Returns: None.
				; 
				;----------------------------------------------------------------------------------------------------
 0000016C			introduction PROC USES EDX
				    ; Set stack frame's EBP
 0000016C  52		   *	    push   edx
 0000016D  55			    PUSH    EBP
 0000016E  8B EC		    MOV     EBP, ESP

				    ; Print intro to console
 00000170  8B 55 10		    MOV     EDX, [EBP+16]                   ; greeting
 00000173  E8 00000000 E	    CALL    WriteString
 00000178  8B 55 0C		    MOV     EDX, [EBP+12]                   ; EC 1
 0000017B  E8 00000000 E	    CALL    WriteString

				    ; Restore EBP for calling procedure
 00000180  5D			    POP     EBP

 00000181  5A		   *	    pop    edx
 00000182  C2 0008		    RET     8
 00000185			introduction ENDP


				;----------------------------------------------------------------------------------------------------
				; Name: ReadVal
				; 
				; Prompts user to input a signed integer value, captures it as a string, and converts the string value
				; to a signed integer value fitting in an SDWORD data type. Prints an error message if the user input
				; is not a properly formatted signed integer value, or if the value is too large or too small to fit
				; in an SDWORD data type. If the value is valid, stores the signed integer value at the address
				; provided and updates validFlag to 1 indicating a valid value. Otherwise, validFlag is set to 0 for
				; invalid inputs.
				; 
				; Preconditions: Global constant BUFFER_SIZE must be defined. Macro mGetString must be defined.
				; 
				; Postconditions: All used registers saved and restored.
				; 
				; Receives: 
				;       [EBP+28] = Reference to bytesRead
				;       [EBP+24] = Reference to validFlag
				;       [EBP+20] = Reference to numVal
				;       [EBP+16] = Reference to prompt
				;       [EBP+12] = Address of inputBuffer
				;       [EBP+8] = Reference to error message
				; 
				; Returns: 
				;       [EBP+24] = Flag, 1 for valid value, 0 for invalid value
				;       [EBP+20] = Updates value of numVal
				; 
				;----------------------------------------------------------------------------------------------------
 00000185			ReadVal PROC USES EAX EBX ECX EDX ESI EDI
				    ; Set up stack frame and allocate local variables
				    LOCAL   numInt:SDWORD, stringLength: DWORD, sign:SBYTE

 00000185  55		   *	    push   ebp
 00000186  8B EC	   *	    mov    ebp, esp
 00000188  83 C4 F4	   *	    add    esp, 0FFFFFFF4h
 0000018B  50		   *	    push   eax
 0000018C  53		   *	    push   ebx
 0000018D  51		   *	    push   ecx
 0000018E  52		   *	    push   edx
 0000018F  56		   *	    push   esi
 00000190  57		   *	    push   edi
 00000191  C6 45 F7 01		    MOV     sign, 1                         ; Default values to positive unless leading '-' provided
 00000195  B8 00000000		    MOV     EAX, 0
 0000019A  BB 00000000		    MOV     EBX, 0

				    ; Call macro to get input string
				    mGetString  [EBP+16], [EBP+12], BUFFER_SIZE, [EBP+28]
 0000019F  50		     1	    PUSH    EAX
 000001A0  51		     1	    PUSH    ECX
 000001A1  52		     1	    PUSH    EDX
 000001A2  57		     1	    PUSH    EDI
 000001A3  8B 55 10	     1	    MOV     EDX, [EBP+16]                     ; Prompt
 000001A6  E8 00000000 E     1	    CALL    WriteString
 000001AB  8B 55 0C	     1	    MOV     EDX, [EBP+12]                     ; Address of buffer
 000001AE  B9 00000064	     1	    MOV     ECX, BUFFER_SIZE
 000001B3  E8 00000000 E     1	    CALL    ReadString
 000001B8  8B 7D 1C	     1	    MOV     EDI, [EBP+28]
 000001BB  89 07	     1	    MOV     [EDI], EAX                      ; Store number of bytes read
 000001BD  5F		     1	    POP     EDI
 000001BE  5A		     1	    POP     EDX
 000001BF  59		     1	    POP     ECX
 000001C0  58		     1	    POP     EAX

				    ; Prepare for loop to convert string to integer
 000001C1  C7 45 FC		    MOV     numInt, 0
	   00000000
 000001C8  FC			    CLD
 000001C9  8B 75 1C		    MOV     ESI, [EBP+28]                   ; Set ECX to value of bytesRead and store it in local variable stringLength
 000001CC  8B 0E		    MOV     ECX, [ESI]
 000001CE  89 4D F8		    MOV     stringLength, ECX
 000001D1  8B 75 0C		    MOV     ESI, [EBP+12]                   ; inputBuffer

 000001D4			_BeginLoop:
				    ; Load next value from inputBuffer and handle special case for first index
 000001D4  AC			    LODSB
 000001D5  3B 4D F8		    CMP     ECX, stringLength
 000001D8  74 02		    JE      _CheckSign
 000001DA  EB 10		    JMP     _Digits

 000001DC			_CheckSign:
				    ; First byte may be +/- to set sign
 000001DC  3C 2B		    CMP     AL, 43                          ; '+'
 000001DE  74 0A		    JE      _SetPositive
 000001E0  3C 2D		    CMP     AL, 45                          ; '-'
 000001E2  74 02		    JE      _SetNegative
 000001E4  EB 06		    JMP     _Digits

 000001E6			_SetNegative:
				    ; Set sign for negatives
 000001E6  C6 45 F7 FF		    MOV     sign, -1

 000001EA			_SetPositive:
 000001EA  E2 E8		    LOOP    _BeginLoop                      ; Default sign value is 1, no need to change

 000001EC			_Digits:
				;----------------------------------------------------------------
				; Confirms all bytes (excluding initial sign values) are digits,
				; converts the ASCII value to its numeric value, and prepares to
				; add the value to the sum (numInt).
				;----------------------------------------------------------------
				    ; Confirm digit
 000001EC  3C 30		    CMP     AL, 48                          ; 0
 000001EE  72 67		    JB      _Error
 000001F0  3C 39		    CMP     AL, 57                          ; 9
 000001F2  77 63		    JA      _Error

				    ; Convert ASCII to numeric
 000001F4  2C 30		    SUB     AL, 48
 000001F6  8A D8		    MOV     BL, AL
 000001F8  8B 45 FC		    MOV     EAX, numInt
 000001FB  BA 0000000A		    MOV     EDX, 10
 00000200  80 7D F7 FF		    CMP     sign, -1
 00000204  74 0E		    JE      _NegativeOverflow

 00000206			_PositiveOverflow:
				;----------------------------------------------------------------
				; Increases current sum (numInt) by an order of magnitude and then
				; adds the numeric value of the current byte in the input buffer.
				; Checks for overflows at each step of the process that could
				; cause the value of numInt to exceed the MAX value of an SDWORD.
				;----------------------------------------------------------------
 00000206  F7 E2		    MUL     EDX
				    ;JO      _Error
 00000208  89 45 FC		    MOV     numInt, EAX
 0000020B  70 4A		    JO      _Error                          ; numInt overflowed after increasing magnitude
 0000020D  01 5D FC		    ADD     numInt, EBX
 00000210  70 45		    JO      _Error                          ; numInt overflowed after adding current digit
 00000212  EB 1E		    JMP     _EndLoop

 00000214			_NegativeOverflow:
				;----------------------------------------------------------------
				; Increases current sum (numInt) by an order of magnitude and then
				; adds the numeric value of the current byte in the input buffer.
				; Checks for overflows at each step of the process that could
				; cause the value of numInt to exceed the MIN value of an SDWORD.
				;----------------------------------------------------------------
 00000214  BA FFFFFFF6		    MOV     EDX, -10                        ; Set numInt to negative during overflow checks, to account for value of -2147483648
 00000219  F7 EA		    IMUL    EDX
				    ;JO      _Error
 0000021B  89 45 FC		    MOV     numInt, EAX
 0000021E  70 37		    JO      _Error                          ; numInt overflowed after increasing magnitude
 00000220  29 5D FC		    SUB     numInt, EBX
 00000223  70 32		    JO      _Error                          ; numInt overflowed after adding current digit
 00000225  BA FFFFFFFF		    MOV     EDX, -1                         ; Set numInt back to positive, so that part of the loop can be reused for both positives and negatives
 0000022A  8B 45 FC		    MOV     EAX, numInt
 0000022D  F7 EA		    IMUL    EDX
 0000022F  89 45 FC		    MOV     numInt, EAX

 00000232			_EndLoop:
				;----------------------------------------------------------------
				; Stores the final value of numInt to the memory location 
				; referenced by the stack parameter pointer for numVal.
				;----------------------------------------------------------------
 00000232  E2 A0		    LOOP    _BeginLoop
 00000234  80 7D F7 FF		    CMP     sign, -1
 00000238  75 0D		    JNE     _StoreNum
 0000023A  BA FFFFFFFF		    MOV     EDX, -1                         ; For negative values, negate numInt before storing since it was previously negated only temporarily for overflow checks
 0000023F  8B 45 FC		    MOV     EAX, numInt
 00000242  F7 EA		    IMUL    EDX
 00000244  89 45 FC		    MOV     numInt, EAX

 00000247			_StoreNum:
				    ; Stores results back to the stack using Base + Offset for accessing stack parameters
 00000247  8B 7D 14		    MOV     EDI, [EBP+20]                   ; numVal
 0000024A  8B 45 FC		    MOV     EAX, numInt
 0000024D  89 07		    MOV     [EDI], EAX
 0000024F  8B 7D 18		    MOV     EDI, [EBP+24]                   ; validFlag = 1, valid input
 00000252  C6 07 01		    MOV     [EDI], BYTE PTR 1
 00000255  EB 0E		    JMP     _End

 00000257			_Error:
				    ; Prints error message if invalid input or number too large or small for SDWORD detected
 00000257  8B 7D 18		    MOV     EDI, [EBP+24]                   ; validFlag = 0, invalid input
 0000025A  C6 07 00		    MOV     [EDI], BYTE PTR 0
 0000025D  8B 55 08		    MOV     EDX, [EBP+8]                    ; errorMsg
 00000260  E8 00000000 E	    CALL    WriteString

 00000265			_End:

 00000265  5F		   *	    pop    edi
 00000266  5E		   *	    pop    esi
 00000267  5A		   *	    pop    edx
 00000268  59		   *	    pop    ecx
 00000269  5B		   *	    pop    ebx
 0000026A  58		   *	    pop    eax
 0000026B  C9		   *	    leave  
 0000026C  C2 0018		    RET     24
 0000026F			ReadVal ENDP


				;----------------------------------------------------------------------------------------------------
				; Name: WriteVal
				; 
				; Given an integer value, converts the numeric value to a null-terminated ASCII string and prints it
				; to the console. 
				; 
				; Preconditions: Macro mDisplayString must be defined.
				; 
				; Postconditions: All used registers saved and restored.
				; 
				; Receives: 
				;       [EBP+16] = Value to print
				;       [EBP+12] = Reference to inputBuffer
				;       [EBP+8] = Reference to outputBuffer
				; 
				; Returns: None.
				; 
				;----------------------------------------------------------------------------------------------------
 0000026F			WriteVal PROC USES EAX EBX ECX EDX ESI EDI
				    ; Set up stack frame and allocate local variables
				    LOCAL   numInt:SDWORD, sign: SBYTE

				    ; Default sign to positive
 0000026F  55		   *	    push   ebp
 00000270  8B EC	   *	    mov    ebp, esp
 00000272  83 C4 F8	   *	    add    esp, 0FFFFFFF8h
 00000275  50		   *	    push   eax
 00000276  53		   *	    push   ebx
 00000277  51		   *	    push   ecx
 00000278  52		   *	    push   edx
 00000279  56		   *	    push   esi
 0000027A  57		   *	    push   edi
 0000027B  C6 45 FB 01		    MOV     sign, 1

				    ; Prepare to loop through integer and convert to string
 0000027F  FC			    CLD
 00000280  8B 5D 10		    MOV     EBX, [EBP+16]                   ; Integer value
 00000283  8B 7D 0C		    MOV     EDI, [EBP+12]                   ; inputBuffer
 00000286  B9 00000000		    MOV     ECX, 0
 0000028B  89 5D FC		    MOV     numInt, EBX
 0000028E  83 7D FC 00		    CMP     numInt, 0
 00000292  7D 04		    JGE     _StringLoop
 00000294  C6 45 FB FF		    MOV     sign, -1

 00000298			_StringLoop:
				;----------------------------------------------------------------
				; Extracts least significant digit remaining from integer value.
				; If a value of 0 was extracted and no value remains, we have
				; reached the end of the integer value.
				;----------------------------------------------------------------
				    ; Extract digit
 00000298  8B 45 FC		    MOV     EAX, numInt
 0000029B  99			    CDQ
 0000029C  BB 0000000A		    MOV     EBX, 10
 000002A1  F7 FB		    IDIV    EBX
 000002A3  83 F9 00		    CMP     ECX, 0
 000002A6  74 0A		    JE      _ContinueLoop                   ; Handle case where integer value to print is 0
 000002A8  83 F8 00		    CMP     EAX, 0
 000002AB  75 05		    JNE     _ContinueLoop
 000002AD  83 FA 00		    CMP     EDX, 0
 000002B0  74 1F		    JE      _EndStringLoop                  ; No more digits to print

 000002B2			_ContinueLoop:
				    ; Prepare to convert extracted digit back to ASCII based on the sign of integer
 000002B2  89 45 FC		    MOV     numInt, EAX
 000002B5  8B C2		    MOV     EAX, EDX
 000002B7  80 7D FB FF		    CMP     sign, -1
 000002BB  74 06		    JE      _NegativeChars

 000002BD			_PositiveChars:
				    ; Convert digit to ASCII and store it
 000002BD  83 C0 30		    ADD     EAX, 48                         ; ASCII digits start at 48d
 000002C0  AA			    STOSB
 000002C1  EB 0B		    JMP     _Repeat

 000002C3			_NegativeChars:
				    ; If integer is negative, extracted digit is also negative. Convert to positive before converting to ASCII and storing
 000002C3  BA FFFFFFFF		    MOV     EDX, -1
 000002C8  F7 EA		    IMUL    EDX
 000002CA  83 C0 30		    ADD     EAX, 48
 000002CD  AA			    STOSB

 000002CE			_Repeat:
				    ; Keep track of number of digits seen. Necessary for reversing.
 000002CE  41			    INC     ECX
 000002CF  EB C7		    JMP     _StringLoop

 000002D1			_EndStringLoop:
				;----------------------------------------------------------------
				; inputBuffer is filled with the ASCII values representing the 
				; integer value, but in reverse. Using string primitives, loops
				; backwards through the inputBuffer and stores each ASCII byte
				; forwards in the outputBuffer, effectively reversing the string.
				; Also handles leading sign for negative values.
				;----------------------------------------------------------------
				    ; Add leading negative sign if necessary
 000002D1  80 7D FB 01		    CMP     sign, 1
 000002D5  74 07		    JE      _SetUpReverse
 000002D7  B8 0000002D		    MOV     EAX, 45                         ; Negative Sign '-'
 000002DC  AA			    STOSB
 000002DD  41			    INC     ECX

 000002DE			_SetUpReverse:
				    ; Initialize ESI for end of inputBuffer and EDI for beginning of outputBuffer
 000002DE  8B 75 0C		    MOV     ESI, [EBP+12]                   ; inputBuffer
 000002E1  03 F1		    ADD     ESI, ECX                        ; ECX contains number of bytes in inputBuffer
 000002E3  4E			    DEC     ESI
 000002E4  8B 7D 08		    MOV     EDI, [EBP+8]                    ; outputBuffer

 000002E7			_ReverseLoop:
				    ; Reverse string into output buffer
 000002E7  FD			    STD
 000002E8  AC			    LODSB
 000002E9  FC			    CLD
 000002EA  AA			    STOSB
 000002EB  E2 FA		    LOOP    _ReverseLoop

 000002ED  B8 00000000		    MOV     EAX, BYTE PTR 0
 000002F2  AA			    STOSB                                   ; Append null terminator to end out outputBuffer

				    ; Call macro to write outputBuffer
				    mDisplayString  [EBP+8]
 000002F3  52		     1	    PUSH    EDX
 000002F4  8B 55 08	     1	    MOV     EDX, [EBP+8]                     ; String
 000002F7  E8 00000000 E     1	    CALL    WriteString
 000002FC  5A		     1	    POP     EDX

 000002FD  5F		   *	    pop    edi
 000002FE  5E		   *	    pop    esi
 000002FF  5A		   *	    pop    edx
 00000300  59		   *	    pop    ecx
 00000301  5B		   *	    pop    ebx
 00000302  58		   *	    pop    eax
 00000303  C9		   *	    leave  
 00000304  C2 000C		    RET     12
 00000307			WriteVal ENDP


				;----------------------------------------------------------------------------------------------------
				; Name: farewell
				; 
				; Prints a goodbye message to the screen via standard I/O.
				; 
				; Preconditions: None.
				; 
				; Postconditions: All used registers saved and restored. Displays message to the console.
				; 
				; Receives: 
				;       [EBP+12] = Reference to farewell string
				; 
				; Returns: None.
				; 
				;----------------------------------------------------------------------------------------------------
 00000307			farewell PROC USES EDX
				    ; Set stack frame's EBP
 00000307  52		   *	    push   edx
 00000308  55			    PUSH    EBP
 00000309  8B EC		    MOV     EBP, ESP

 0000030B  8B 55 0C		    MOV     EDX, [EBP+12]                   ; goodbye
 0000030E  E8 00000000 E	    CALL    WriteString

				    ; Restore EBP for calling procedure
 00000313  5D			    POP     EBP

 00000314  5A		   *	    pop    edx
 00000315  C2 0004		    RET     4
 00000318			farewell ENDP

				END main
Microsoft (R) Macro Assembler Version 14.29.30139.0	    03/29/22 11:25:11
<Low-level I/O Procedures with String Primitives and Macros   Symbols 2 - 1




Macros:

                N a m e                 Type

mDisplayString . . . . . . . . .	Proc
mGetString . . . . . . . . . . .	Proc


Structures and Unions:

                N a m e                  Size
                                         Offset      Type

CONSOLE_CURSOR_INFO  . . . . . .	 00000008
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  bVisible . . . . . . . . . . .	 00000004	 DWord
CONSOLE_SCREEN_BUFFER_INFO . . .	 00000016
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCursorPosition . . . . . . .	 00000004	 DWord
  wAttributes  . . . . . . . . .	 00000008	 Word
  srWindow . . . . . . . . . . .	 0000000A	 QWord
  dwMaximumWindowSize  . . . . .	 00000012	 DWord
COORD  . . . . . . . . . . . . .	 00000004
  X  . . . . . . . . . . . . . .	 00000000	 Word
  Y  . . . . . . . . . . . . . .	 00000002	 Word
FILETIME . . . . . . . . . . . .	 00000008
  loDateTime . . . . . . . . . .	 00000000	 DWord
  hiDateTime . . . . . . . . . .	 00000004	 DWord
FOCUS_EVENT_RECORD . . . . . . .	 00000004
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
FPU_ENVIRON  . . . . . . . . . .	 0000001C
  controlWord  . . . . . . . . .	 00000000	 Word
  statusWord . . . . . . . . . .	 00000004	 Word
  tagWord  . . . . . . . . . . .	 00000008	 Word
  instrPointerOffset . . . . . .	 0000000C	 DWord
  instrPointerSelector . . . . .	 00000010	 DWord
  operandPointerOffset . . . . .	 00000014	 DWord
  operandPointerSelector . . . .	 00000018	 Word
INPUT_RECORD . . . . . . . . . .	 00000014
  EventType  . . . . . . . . . .	 00000000	 Word
  Event  . . . . . . . . . . . .	 00000004	 XmmWord
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
  dwSize . . . . . . . . . . . .	 00000000	 DWord
  dwCommandId  . . . . . . . . .	 00000000	 DWord
  bSetFocus  . . . . . . . . . .	 00000000	 DWord
KEY_EVENT_RECORD . . . . . . . .	 00000010
  bKeyDown . . . . . . . . . . .	 00000000	 DWord
  wRepeatCount . . . . . . . . .	 00000004	 Word
  wVirtualKeyCode  . . . . . . .	 00000006	 Word
  wVirtualScanCode . . . . . . .	 00000008	 Word
  uChar  . . . . . . . . . . . .	 0000000A	 Word
  UnicodeChar  . . . . . . . . .	 00000000	 Word
  AsciiChar  . . . . . . . . . .	 00000000	 Byte
  dwControlKeyState  . . . . . .	 0000000C	 DWord
MENU_EVENT_RECORD  . . . . . . .	 00000004
  dwCommandId  . . . . . . . . .	 00000000	 DWord
MOUSE_EVENT_RECORD . . . . . . .	 00000010
  dwMousePosition  . . . . . . .	 00000000	 DWord
  dwButtonState  . . . . . . . .	 00000004	 DWord
  dwMouseControlKeyState . . . .	 00000008	 DWord
  dwEventFlags . . . . . . . . .	 0000000C	 DWord
SMALL_RECT . . . . . . . . . . .	 00000008
  Left . . . . . . . . . . . . .	 00000000	 Word
  Top  . . . . . . . . . . . . .	 00000002	 Word
  Right  . . . . . . . . . . . .	 00000004	 Word
  Bottom . . . . . . . . . . . .	 00000006	 Word
SYSTEMTIME . . . . . . . . . . .	 00000010
  wYear  . . . . . . . . . . . .	 00000000	 Word
  wMonth . . . . . . . . . . . .	 00000002	 Word
  wDayOfWeek . . . . . . . . . .	 00000004	 Word
  wDay . . . . . . . . . . . . .	 00000006	 Word
  wHour  . . . . . . . . . . . .	 00000008	 Word
  wMinute  . . . . . . . . . . .	 0000000A	 Word
  wSecond  . . . . . . . . . . .	 0000000C	 Word
  wMilliseconds  . . . . . . . .	 0000000E	 Word
WINDOW_BUFFER_SIZE_RECORD  . . .	 00000004
  dwSize . . . . . . . . . . . .	 00000000	 DWord


Segments and Groups:

                N a m e                 Size     Length   Align   Combine Class

FLAT . . . . . . . . . . . . . .	GROUP
STACK  . . . . . . . . . . . . .	32 Bit	 00001000 Para	  Stack	  'STACK'	 
_DATA  . . . . . . . . . . . . .	32 Bit	 000002B7 Para	  Public  'DATA'	
_TEXT  . . . . . . . . . . . . .	32 Bit	 00000318 Para	  Public  'CODE'	


Procedures, parameters, and locals:

                N a m e                 Type     Value    Attr

CloseFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CloseHandle  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Clrscr . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateFileA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
CreateOutputFile . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Crlf . . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Delay  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpMem  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
DumpRegs . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ExitProcess  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToDosDateTime  . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FileTimeToSystemTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FlushConsoleInputBuffer  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
FormatMessageA . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandLineA  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetCommandTail . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCP . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetConsoleScreenBufferInfo . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetDateTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetFileTime  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetKeyState  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLastError . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMaxXY . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetMseconds  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetNumberOfConsoleInputEvents  .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetProcessHeap . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetStdHandle . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetSystemTime  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
GetTickCount . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Gotoxy . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapAlloc  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapCreate . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapDestroy  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapFree . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
HeapSize . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
IsDigit  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
LocalFree  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MessageBoxA  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBoxAsk  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
MsgBox . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
OpenInputFile  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseDecimal32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ParseInteger32 . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
PeekConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Random32 . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
RandomRange  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Randomize  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadChar . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleA . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadConsoleInputA  . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadDec  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFile . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFloat  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadFromFile . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadHex  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadInt  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKeyFlush . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadKey  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadString . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ReadVal  . . . . . . . . . . . .	P Near	 00000185 _TEXT	Length= 000000EA Public STDCALL
  numInt . . . . . . . . . . . .	DWord	 bp - 00000004
  stringLength . . . . . . . . .	DWord	 bp - 00000008
  sign . . . . . . . . . . . . .	Byte	 bp - 00000009
  _BeginLoop . . . . . . . . . .	L Near	 000001D4 _TEXT	
  _CheckSign . . . . . . . . . .	L Near	 000001DC _TEXT	
  _SetNegative . . . . . . . . .	L Near	 000001E6 _TEXT	
  _SetPositive . . . . . . . . .	L Near	 000001EA _TEXT	
  _Digits  . . . . . . . . . . .	L Near	 000001EC _TEXT	
  _PositiveOverflow  . . . . . .	L Near	 00000206 _TEXT	
  _NegativeOverflow  . . . . . .	L Near	 00000214 _TEXT	
  _EndLoop . . . . . . . . . . .	L Near	 00000232 _TEXT	
  _StoreNum  . . . . . . . . . .	L Near	 00000247 _TEXT	
  _Error . . . . . . . . . . . .	L Near	 00000257 _TEXT	
  _End . . . . . . . . . . . . .	L Near	 00000265 _TEXT	
SetConsoleCursorInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleCursorPosition . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleMode . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleScreenBufferSize . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTextAttribute  . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleTitleA . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetConsoleWindowInfo . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetFilePointer . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetLocalTime . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SetTextColor . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
ShowFPUStack . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Sleep  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
StrLength  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_compare  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_copy . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_length . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_trim . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
Str_ucase  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
SystemTimeToFileTime . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WaitMsg  . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBinB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteBin . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteChar  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleA  . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputAttribute  . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteConsoleOutputCharacterA . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteDec . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFile  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteFloat . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHexB  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteHex . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteInt . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrameName  . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteStackFrame  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteString  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteToFile  . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
WriteVal . . . . . . . . . . . .	P Near	 0000026F _TEXT	Length= 00000098 Public STDCALL
  numInt . . . . . . . . . . . .	DWord	 bp - 00000004
  sign . . . . . . . . . . . . .	Byte	 bp - 00000005
  _StringLoop  . . . . . . . . .	L Near	 00000298 _TEXT	
  _ContinueLoop  . . . . . . . .	L Near	 000002B2 _TEXT	
  _PositiveChars . . . . . . . .	L Near	 000002BD _TEXT	
  _NegativeChars . . . . . . . .	L Near	 000002C3 _TEXT	
  _Repeat  . . . . . . . . . . .	L Near	 000002CE _TEXT	
  _EndStringLoop . . . . . . . .	L Near	 000002D1 _TEXT	
  _SetUpReverse  . . . . . . . .	L Near	 000002DE _TEXT	
  _ReverseLoop . . . . . . . . .	L Near	 000002E7 _TEXT	
WriteWindowsMsg  . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External STDCALL
farewell . . . . . . . . . . . .	P Near	 00000307 _TEXT	Length= 00000011 Public STDCALL
introduction . . . . . . . . . .	P Near	 0000016C _TEXT	Length= 00000019 Public STDCALL
main . . . . . . . . . . . . . .	P Near	 00000000 _TEXT	Length= 0000016C Public STDCALL
  _InLoop  . . . . . . . . . . .	L Near	 00000019 _TEXT	
  _Average . . . . . . . . . . .	L Near	 000000AD _TEXT	
  _OutLoop . . . . . . . . . . .	L Near	 000000DD _TEXT	
  _MiddleOfArray . . . . . . . .	L Near	 000000FF _TEXT	
  _EndOutLoop  . . . . . . . . .	L Near	 0000010C _TEXT	
printf . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
scanf  . . . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C
wsprintfA  . . . . . . . . . . .	P Near	 00000000 FLAT	Length= 00000000 External C


Symbols:

                N a m e                 Type     Value    Attr

@CodeSize  . . . . . . . . . . .	Number	 00000000h   
@DataSize  . . . . . . . . . . .	Number	 00000000h   
@Interface . . . . . . . . . . .	Number	 00000003h   
@Model . . . . . . . . . . . . .	Number	 00000007h   
@code  . . . . . . . . . . . . .	Text   	 _TEXT
@data  . . . . . . . . . . . . .	Text   	 FLAT
@fardata?  . . . . . . . . . . .	Text   	 FLAT
@fardata . . . . . . . . . . . .	Text   	 FLAT
@stack . . . . . . . . . . . . .	Text   	 FLAT
ALT_MASK . . . . . . . . . . . .	Number	 00000003h   
ARRAY_SIZE . . . . . . . . . . .	Number	 0000000Ah   
BUFFER_SIZE  . . . . . . . . . .	Number	 00000064h   
CAPSLOCK_ON  . . . . . . . . . .	Number	 00000080h   
CREATE_ALWAYS  . . . . . . . . .	Number	 00000002h   
CREATE_NEW . . . . . . . . . . .	Number	 00000001h   
CTRL_MASK  . . . . . . . . . . .	Number	 0000000Ch   
CreateFile . . . . . . . . . . .	Text   	 CreateFileA
DO_NOT_SHARE . . . . . . . . . .	Number	 00000000h   
ENABLE_ECHO_INPUT  . . . . . . .	Number	 00000004h   
ENABLE_LINE_INPUT  . . . . . . .	Number	 00000002h   
ENABLE_MOUSE_INPUT . . . . . . .	Number	 00000010h   
ENABLE_PROCESSED_INPUT . . . . .	Number	 00000001h   
ENABLE_PROCESSED_OUTPUT  . . . .	Number	 00000001h   
ENABLE_WINDOW_INPUT  . . . . . .	Number	 00000008h   
ENABLE_WRAP_AT_EOL_OUTPUT  . . .	Number	 00000002h   
ENHANCED_KEY . . . . . . . . . .	Number	 00000100h   
FALSE  . . . . . . . . . . . . .	Number	 00000000h   
FILE_APPEND_DATA . . . . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_ARCHIVE . . . . .	Number	 00000020h   
FILE_ATTRIBUTE_COMPRESSED  . . .	Number	 00000800h   
FILE_ATTRIBUTE_DEVICE  . . . . .	Number	 00000040h   
FILE_ATTRIBUTE_DIRECTORY . . . .	Number	 00000010h   
FILE_ATTRIBUTE_ENCRYPTED . . . .	Number	 00004000h   
FILE_ATTRIBUTE_HIDDEN  . . . . .	Number	 00000002h   
FILE_ATTRIBUTE_NORMAL  . . . . .	Number	 00000080h   
FILE_ATTRIBUTE_NOT_CONTENT_INDEXED .	Number	 00002000h   
FILE_ATTRIBUTE_OFFLINE . . . . .	Number	 00001000h   
FILE_ATTRIBUTE_READONLY  . . . .	Number	 00000001h   
FILE_ATTRIBUTE_REPARSE_POINT . .	Number	 00000400h   
FILE_ATTRIBUTE_SPARSE_FILE . . .	Number	 00000200h   
FILE_ATTRIBUTE_SYSTEM  . . . . .	Number	 00000004h   
FILE_ATTRIBUTE_TEMPORARY . . . .	Number	 00000100h   
FILE_BEGIN . . . . . . . . . . .	Number	 00000000h   
FILE_CURRENT . . . . . . . . . .	Number	 00000001h   
FILE_DELETE_CHILD  . . . . . . .	Number	 00000040h   
FILE_END . . . . . . . . . . . .	Number	 00000002h   
FILE_READ_DATA . . . . . . . . .	Number	 00000001h   
FILE_SHARE_DELETE  . . . . . . .	Number	 00000004h   
FILE_SHARE_READ  . . . . . . . .	Number	 00000001h   
FILE_SHARE_WRITE . . . . . . . .	Number	 00000002h   
FILE_WRITE_DATA  . . . . . . . .	Number	 00000002h   
FOCUS_EVENT  . . . . . . . . . .	Number	 00000010h   
FORMAT_MESSAGE_ALLOCATE_BUFFER .	Number	 00000100h   
FORMAT_MESSAGE_FROM_SYSTEM . . .	Number	 00001000h   
FormatMessage  . . . . . . . . .	Text   	 FormatMessageA
GENERIC_ALL  . . . . . . . . . .	Number	 10000000h   
GENERIC_EXECUTE  . . . . . . . .	Number	 20000000h   
GENERIC_READ . . . . . . . . . .	Number	 -80000000h   
GENERIC_WRITE  . . . . . . . . .	Number	 40000000h   
GetCommandLine . . . . . . . . .	Text   	 GetCommandLineA
HANDLE . . . . . . . . . . . . .	Text   	 DWORD
HEAP_GENERATE_EXCEPTIONS . . . .	Number	 00000004h   
HEAP_GROWABLE  . . . . . . . . .	Number	 00000002h   
HEAP_NO_SERIALIZE  . . . . . . .	Number	 00000001h   
HEAP_REALLOC_IN_PLACE_ONLY . . .	Number	 00000010h   
HEAP_ZERO_MEMORY . . . . . . . .	Number	 00000008h   
IDABORT  . . . . . . . . . . . .	Number	 00000003h   
IDCANCEL . . . . . . . . . . . .	Number	 00000002h   
IDCLOSE  . . . . . . . . . . . .	Number	 00000008h   
IDCONTINUE . . . . . . . . . . .	Number	 0000000Bh   
IDHELP . . . . . . . . . . . . .	Number	 00000009h   
IDIGNORE . . . . . . . . . . . .	Number	 00000005h   
IDNO . . . . . . . . . . . . . .	Number	 00000007h   
IDOK . . . . . . . . . . . . . .	Number	 00000001h   
IDRETRY  . . . . . . . . . . . .	Number	 00000004h   
IDTIMEOUT  . . . . . . . . . . .	Number	 00007D00h   
IDTRYAGAIN . . . . . . . . . . .	Number	 0000000Ah   
IDYES  . . . . . . . . . . . . .	Number	 00000006h   
INVALID_HANDLE_VALUE . . . . . .	Number	 -00000001h   
KBDOWN_FLAG  . . . . . . . . . .	Number	 00000001h   
KEY_EVENT  . . . . . . . . . . .	Number	 00000001h   
KEY_MASKS  . . . . . . . . . . .	Number	 0000001Fh   
LEFT_ALT_PRESSED . . . . . . . .	Number	 00000002h   
LEFT_CTRL_PRESSED  . . . . . . .	Number	 00000008h   
MB_ABORTRETRYIGNORE  . . . . . .	Number	 00000002h   
MB_APPLMODAL . . . . . . . . . .	Number	 00000000h   
MB_CANCELTRYCONTINUE . . . . . .	Number	 00000006h   
MB_DEFBUTTON1  . . . . . . . . .	Number	 00000000h   
MB_DEFBUTTON2  . . . . . . . . .	Number	 00000100h   
MB_DEFBUTTON3  . . . . . . . . .	Number	 00000200h   
MB_DEFBUTTON4  . . . . . . . . .	Number	 00000300h   
MB_HELP  . . . . . . . . . . . .	Number	 00004000h   
MB_ICONASTERISK  . . . . . . . .	Number	 00000040h   
MB_ICONERROR . . . . . . . . . .	Number	 00000010h   
MB_ICONEXCLAMATION . . . . . . .	Number	 00000030h   
MB_ICONHAND  . . . . . . . . . .	Number	 00000010h   
MB_ICONINFORMATION . . . . . . .	Number	 00000040h   
MB_ICONQUESTION  . . . . . . . .	Number	 00000020h   
MB_ICONSTOP  . . . . . . . . . .	Number	 00000010h   
MB_ICONWARNING . . . . . . . . .	Number	 00000030h   
MB_OKCANCEL  . . . . . . . . . .	Number	 00000001h   
MB_OK  . . . . . . . . . . . . .	Number	 00000000h   
MB_RETRYCANCEL . . . . . . . . .	Number	 00000005h   
MB_SYSTEMMODAL . . . . . . . . .	Number	 00001000h   
MB_TASKMODAL . . . . . . . . . .	Number	 00002000h   
MB_USERICON  . . . . . . . . . .	Number	 00000080h   
MB_YESNOCANCEL . . . . . . . . .	Number	 00000003h   
MB_YESNO . . . . . . . . . . . .	Number	 00000004h   
MENU_EVENT . . . . . . . . . . .	Number	 00000008h   
MOUSE_EVENT  . . . . . . . . . .	Number	 00000002h   
MessageBox . . . . . . . . . . .	Text   	 MessageBoxA
NULL . . . . . . . . . . . . . .	Number	 00000000h   
NUMLOCK_ON . . . . . . . . . . .	Number	 00000020h   
OPEN_ALWAYS  . . . . . . . . . .	Number	 00000004h   
OPEN_EXISTING  . . . . . . . . .	Number	 00000003h   
PeekConsoleInput . . . . . . . .	Text   	 PeekConsoleInputA
RIGHT_ALT_PRESSED  . . . . . . .	Number	 00000001h   
RIGHT_CTRL_PRESSED . . . . . . .	Number	 00000004h   
ReadConsoleInput . . . . . . . .	Text   	 ReadConsoleInputA
ReadConsole  . . . . . . . . . .	Text   	 ReadConsoleA
SCROLLLOCK_ON  . . . . . . . . .	Number	 00000040h   
SHIFT_MASK . . . . . . . . . . .	Number	 00000010h   
SHIFT_PRESSED  . . . . . . . . .	Number	 00000010h   
STD_ERROR_HANDLE . . . . . . . .	Number	 -0000000Ch   
STD_INPUT_HANDLE . . . . . . . .	Number	 -0000000Ah   
STD_OUTPUT_HANDLE  . . . . . . .	Number	 -0000000Bh   
SetConsoleTitle  . . . . . . . .	Text   	 SetConsoleTitleA
TAB  . . . . . . . . . . . . . .	Number	 00000009h   
TRUE . . . . . . . . . . . . . .	Number	 00000001h   
TRUNCATE_EXISTING  . . . . . . .	Number	 00000005h   
VK_11  . . . . . . . . . . . . .	Number	 000000BDh   
VK_12  . . . . . . . . . . . . .	Number	 000000BBh   
VK_ADD . . . . . . . . . . . . .	Number	 0000006Bh   
VK_BACK  . . . . . . . . . . . .	Number	 00000008h   
VK_CANCEL  . . . . . . . . . . .	Number	 00000003h   
VK_CAPITAL . . . . . . . . . . .	Number	 00000014h   
VK_CLEAR . . . . . . . . . . . .	Number	 0000000Ch   
VK_CONTROL . . . . . . . . . . .	Number	 00000011h   
VK_DECIMAL . . . . . . . . . . .	Number	 0000006Eh   
VK_DELETE  . . . . . . . . . . .	Number	 0000002Eh   
VK_DIVIDE  . . . . . . . . . . .	Number	 0000006Fh   
VK_DOWN  . . . . . . . . . . . .	Number	 00000028h   
VK_END . . . . . . . . . . . . .	Number	 00000023h   
VK_ESCAPE  . . . . . . . . . . .	Number	 0000001Bh   
VK_EXECUTE . . . . . . . . . . .	Number	 0000002Bh   
VK_F10 . . . . . . . . . . . . .	Number	 00000079h   
VK_F11 . . . . . . . . . . . . .	Number	 0000007Ah   
VK_F12 . . . . . . . . . . . . .	Number	 0000007Bh   
VK_F13 . . . . . . . . . . . . .	Number	 0000007Ch   
VK_F14 . . . . . . . . . . . . .	Number	 0000007Dh   
VK_F15 . . . . . . . . . . . . .	Number	 0000007Eh   
VK_F16 . . . . . . . . . . . . .	Number	 0000007Fh   
VK_F17 . . . . . . . . . . . . .	Number	 00000080h   
VK_F18 . . . . . . . . . . . . .	Number	 00000081h   
VK_F19 . . . . . . . . . . . . .	Number	 00000082h   
VK_F1  . . . . . . . . . . . . .	Number	 00000070h   
VK_F20 . . . . . . . . . . . . .	Number	 00000083h   
VK_F21 . . . . . . . . . . . . .	Number	 00000084h   
VK_F22 . . . . . . . . . . . . .	Number	 00000085h   
VK_F23 . . . . . . . . . . . . .	Number	 00000086h   
VK_F24 . . . . . . . . . . . . .	Number	 00000087h   
VK_F2  . . . . . . . . . . . . .	Number	 00000071h   
VK_F3  . . . . . . . . . . . . .	Number	 00000072h   
VK_F4  . . . . . . . . . . . . .	Number	 00000073h   
VK_F5  . . . . . . . . . . . . .	Number	 00000074h   
VK_F6  . . . . . . . . . . . . .	Number	 00000075h   
VK_F7  . . . . . . . . . . . . .	Number	 00000076h   
VK_F8  . . . . . . . . . . . . .	Number	 00000077h   
VK_F9  . . . . . . . . . . . . .	Number	 00000078h   
VK_HELP  . . . . . . . . . . . .	Number	 0000002Fh   
VK_HOME  . . . . . . . . . . . .	Number	 00000024h   
VK_INSERT  . . . . . . . . . . .	Number	 0000002Dh   
VK_LBUTTON . . . . . . . . . . .	Number	 00000001h   
VK_LCONTROL  . . . . . . . . . .	Number	 000000A2h   
VK_LEFT  . . . . . . . . . . . .	Number	 00000025h   
VK_LMENU . . . . . . . . . . . .	Number	 000000A4h   
VK_LSHIFT  . . . . . . . . . . .	Number	 000000A0h   
VK_MENU  . . . . . . . . . . . .	Number	 00000012h   
VK_MULTIPLY  . . . . . . . . . .	Number	 0000006Ah   
VK_NEXT  . . . . . . . . . . . .	Number	 00000022h   
VK_NUMLOCK . . . . . . . . . . .	Number	 00000090h   
VK_NUMPAD0 . . . . . . . . . . .	Number	 00000060h   
VK_NUMPAD1 . . . . . . . . . . .	Number	 00000061h   
VK_NUMPAD2 . . . . . . . . . . .	Number	 00000062h   
VK_NUMPAD3 . . . . . . . . . . .	Number	 00000063h   
VK_NUMPAD4 . . . . . . . . . . .	Number	 00000064h   
VK_NUMPAD5 . . . . . . . . . . .	Number	 00000065h   
VK_NUMPAD6 . . . . . . . . . . .	Number	 00000066h   
VK_NUMPAD7 . . . . . . . . . . .	Number	 00000067h   
VK_NUMPAD8 . . . . . . . . . . .	Number	 00000068h   
VK_NUMPAD9 . . . . . . . . . . .	Number	 00000069h   
VK_PAUSE . . . . . . . . . . . .	Number	 00000013h   
VK_PRINT . . . . . . . . . . . .	Number	 0000002Ah   
VK_PRIOR . . . . . . . . . . . .	Number	 00000021h   
VK_RBUTTON . . . . . . . . . . .	Number	 00000002h   
VK_RCONTROL  . . . . . . . . . .	Number	 000000A3h   
VK_RETURN  . . . . . . . . . . .	Number	 0000000Dh   
VK_RIGHT . . . . . . . . . . . .	Number	 00000027h   
VK_RMENU . . . . . . . . . . . .	Number	 000000A5h   
VK_RSHIFT  . . . . . . . . . . .	Number	 000000A1h   
VK_SCROLL  . . . . . . . . . . .	Number	 00000091h   
VK_SEPARATER . . . . . . . . . .	Number	 0000006Ch   
VK_SHIFT . . . . . . . . . . . .	Number	 00000010h   
VK_SNAPSHOT  . . . . . . . . . .	Number	 0000002Ch   
VK_SPACE . . . . . . . . . . . .	Number	 00000020h   
VK_SUBTRACT  . . . . . . . . . .	Number	 0000006Dh   
VK_TAB . . . . . . . . . . . . .	Number	 00000009h   
VK_UP  . . . . . . . . . . . . .	Number	 00000026h   
WINDOW_BUFFER_SIZE_EVENT . . . .	Number	 00000004h   
WriteConsoleOutputCharacter  . .	Text   	 WriteConsoleOutputCharacterA
WriteConsole . . . . . . . . . .	Text   	 WriteConsoleA
average  . . . . . . . . . . . .	DWord	 00000186 _DATA	
avgMsg . . . . . . . . . . . . .	Byte	 00000241 _DATA	
black  . . . . . . . . . . . . .	Number	 00000000h   
blue . . . . . . . . . . . . . .	Number	 00000001h   
brown  . . . . . . . . . . . . .	Number	 00000006h   
bytesRead  . . . . . . . . . . .	DWord	 0000018E _DATA	
comma  . . . . . . . . . . . . .	Byte	 0000025C _DATA	
count  . . . . . . . . . . . . .	DWord	 0000018A _DATA	
cyan . . . . . . . . . . . . . .	Number	 00000003h   
errorMsg . . . . . . . . . . . .	Byte	 00000192 _DATA	
exit . . . . . . . . . . . . . .	Text   	 INVOKE ExitProcess,0
extraCredit_1  . . . . . . . . .	Byte	 0000026A _DATA	
goodbye  . . . . . . . . . . . .	Byte	 00000058 _DATA	
gray . . . . . . . . . . . . . .	Number	 00000008h   
green  . . . . . . . . . . . . .	Number	 00000002h   
greeting . . . . . . . . . . . .	Byte	 00000000 _DATA	
inputBuffer  . . . . . . . . . .	Byte	 0000008D _DATA	
leftBracket  . . . . . . . . . .	Byte	 00000262 _DATA	
lightBlue  . . . . . . . . . . .	Number	 00000009h   
lightCyan  . . . . . . . . . . .	Number	 0000000Bh   
lightGray  . . . . . . . . . . .	Number	 00000007h   
lightGreen . . . . . . . . . . .	Number	 0000000Ah   
lightMagenta . . . . . . . . . .	Number	 0000000Dh   
lightRed . . . . . . . . . . . .	Number	 0000000Ch   
magenta  . . . . . . . . . . . .	Number	 00000005h   
numArray . . . . . . . . . . . .	DWord	 00000155 _DATA	
numVal . . . . . . . . . . . . .	DWord	 0000017D _DATA	
outputBuffer . . . . . . . . . .	Byte	 000000F1 _DATA	
outputMsg  . . . . . . . . . . .	Byte	 000001E2 _DATA	
period . . . . . . . . . . . . .	Byte	 0000025F _DATA	
prompt . . . . . . . . . . . . .	Byte	 0000006E _DATA	
red  . . . . . . . . . . . . . .	Number	 00000004h   
rightBracket . . . . . . . . . .	Byte	 00000265 _DATA	
subtotalMsg  . . . . . . . . . .	Byte	 00000227 _DATA	
sumMsg . . . . . . . . . . . . .	Byte	 00000209 _DATA	
sum  . . . . . . . . . . . . . .	DWord	 00000182 _DATA	
validFlag  . . . . . . . . . . .	Byte	 00000181 _DATA	
white  . . . . . . . . . . . . .	Number	 0000000Fh   
wsprintf . . . . . . . . . . . .	Text   	 wsprintfA
yellow . . . . . . . . . . . . .	Number	 0000000Eh   

	   0 Warnings
	   0 Errors
